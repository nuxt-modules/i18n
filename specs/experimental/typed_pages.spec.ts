import { test, expect, describe } from 'vitest'
import { fileURLToPath } from 'node:url'
import { setup } from '../utils'
import fs from 'node:fs/promises'

await setup({
  rootDir: fileURLToPath(new URL(`../fixtures/basic_usage`, import.meta.url)),
  browser: false,
  // overrides
  nuxtConfig: {
    experimental: {
      typedPages: true
    }
  }
})

describe('`experimental.typedPages` undefined or enabled', async () => {
  test('generates route types', async () => {
    expect(
      await fs.readFile(
        fileURLToPath(
          new URL(
            `../fixtures/basic_usage/.nuxt/___experimental_typed_pages_spec_ts/types/typed-router-i18n.d.ts`,
            import.meta.url
          )
        ),
        'utf-8'
      )
    ).toMatchInlineSnapshot(`
      "/* eslint-disable */
      /* prettier-ignore */
      // @ts-nocheck
      // noinspection ES6UnusedImports
      // Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
      // It's recommended to commit this file.
      // Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

      declare module 'vue-router/auto-resolver' {
        export type ParamParserCustom = never
      }

      declare module 'vue-router/auto-routes' {
        import type {
          RouteRecordInfo,
          ParamValue,
          ParamValueOneOrMore,
          ParamValueZeroOrMore,
          ParamValueZeroOrOne,
        } from 'vue-router'

        /**
         * Route name map generated by unplugin-vue-router
         */
        export interface RouteNamedMapI18n {
          'index': RouteRecordInfo<
            'index',
            '/',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'pathMatch': RouteRecordInfo<
            'pathMatch',
            '/:pathMatch(.*)*',
            { pathMatch?: ParamValueZeroOrMore<true> },
            { pathMatch?: ParamValueZeroOrMore<false> },
            | never
          >,
          'about': RouteRecordInfo<
            'about',
            '/about',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'category-slug': RouteRecordInfo<
            'category-slug',
            '/category/:slug()',
            { slug: ParamValue<true> },
            { slug: ParamValue<false> },
            | never
          >,
          'composables': RouteRecordInfo<
            'composables',
            '/composables',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'experimental-slug': RouteRecordInfo<
            'experimental-slug',
            '/experimental/:slug(.*)*',
            { slug?: ParamValueZeroOrMore<true> },
            { slug?: ParamValueZeroOrMore<false> },
            | never
          >,
          'experimental-auto-import-translation-functions': RouteRecordInfo<
            'experimental-auto-import-translation-functions',
            '/experimental/auto-import-translation-functions',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'greetings': RouteRecordInfo<
            'greetings',
            '/greetings',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'layer-page': RouteRecordInfo<
            'layer-page',
            '/layer-page',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'layer-parent': RouteRecordInfo<
            'layer-parent',
            '/layer-parent',
            Record<never, never>,
            Record<never, never>,
            | 'layer-parent-layer-child'
          >,
          'layer-parent-layer-child': RouteRecordInfo<
            'layer-parent-layer-child',
            '/layer-parent/layer-child',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'long-text': RouteRecordInfo<
            'long-text',
            '/long-text',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'nested-test-route': RouteRecordInfo<
            'nested-test-route',
            '/nested/test-route',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'nuxt-context-extension': RouteRecordInfo<
            'nuxt-context-extension',
            '/nuxt-context-extension',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'page with spaces': RouteRecordInfo<
            'page with spaces',
            '/page%20with%20spaces',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
          'post-id': RouteRecordInfo<
            'post-id',
            '/post/:id()',
            { id: ParamValue<true> },
            { id: ParamValue<false> },
            | never
          >,
          'products': RouteRecordInfo<
            'products',
            '/products',
            Record<never, never>,
            Record<never, never>,
            | 'products-slug'
          >,
          'products-slug': RouteRecordInfo<
            'products-slug',
            '/products/:slug()',
            { slug: ParamValue<true> },
            { slug: ParamValue<false> },
            | never
          >,
          'user-profile': RouteRecordInfo<
            'user-profile',
            '/user/profile',
            Record<never, never>,
            Record<never, never>,
            | never
          >,
        }

        /**
         * Route file to route info map by unplugin-vue-router.
         * Used by the \\\`sfc-typed-router\\\` Volar plugin to automatically type \\\`useRoute()\\\`.
         *
         * Each key is a file path relative to the project root with 2 properties:
         * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
         * - views: names of nested views (can be passed to <RouterView name="...">)
         *
         * @internal
         */
        export interface _RouteFileInfoMap {
          'specs/fixtures/basic_usage/app/pages/index.vue': {
            routes:
              | 'index'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/[...pathMatch].vue': {
            routes:
              | 'pathMatch'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/about/index.vue': {
            routes:
              | 'about'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/category/[slug].vue': {
            routes:
              | 'category-slug'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/composables.vue': {
            routes:
              | 'composables'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/experimental/[...slug].vue': {
            routes:
              | 'experimental-slug'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/experimental/auto-import-translation-functions.vue': {
            routes:
              | 'experimental-auto-import-translation-functions'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/greetings.vue': {
            routes:
              | 'greetings'
            views:
              | never
          }
          'specs/fixtures/layers/layer-lazy/pages/layer-page.vue': {
            routes:
              | 'layer-page'
            views:
              | never
          }
          'specs/fixtures/layers/layer-lazy/pages/layer-parent.vue': {
            routes:
              | 'layer-parent'
              | 'layer-parent-layer-child'
            views:
              | 'default'
          }
          'specs/fixtures/layers/layer-lazy/pages/layer-parent/layer-child.vue': {
            routes:
              | 'layer-parent-layer-child'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/long-text.vue': {
            routes:
              | 'long-text'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/nested/test-route.vue': {
            routes:
              | 'nested-test-route'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/nuxt-context-extension.vue': {
            routes:
              | 'nuxt-context-extension'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/page with spaces.vue': {
            routes:
              | 'page with spaces'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/post/[id].vue': {
            routes:
              | 'post-id'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/products.vue': {
            routes:
              | 'products'
              | 'products-slug'
            views:
              | 'default'
          }
          'specs/fixtures/basic_usage/app/pages/products/[slug].vue': {
            routes:
              | 'products-slug'
            views:
              | never
          }
          'specs/fixtures/basic_usage/app/pages/user/profile.vue': {
            routes:
              | 'user-profile'
            views:
              | never
          }
        }

        /**
         * Get a union of possible route names in a certain route component file.
         * Used by the \\\`sfc-typed-router\\\` Volar plugin to automatically type \\\`useRoute()\\\`.
         *
         * @internal
         */
        export type _RouteNamesForFilePath<FilePath extends string> =
          _RouteFileInfoMap extends Record<FilePath, infer Info>
            ? Info['routes']
            : keyof RouteNamedMap
      }
      "
    `)
  })
})
