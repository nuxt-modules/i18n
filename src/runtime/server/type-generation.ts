import { deepCopy, isArray, isFunction, isObject } from '@intlify/shared'
import { vueI18nConfigs, localeLoaders, normalizedLocales } from '#internal/i18n/options.mjs'
import { dtsFile } from '#internal/i18n-type-generation-options'
import { loadVueI18nOptions } from '../shared/messages'
import { getMergedMessages } from './utils/messages'
import { writeFile } from 'fs/promises'
import { useRuntimeConfig } from '#imports'

import type { I18nOptions } from 'vue-i18n'
import type { I18nPublicRuntimeConfig } from '#internal-i18n-types'

export default async () => {
  const { experimental, defaultLocale } = useRuntimeConfig().public.i18n as I18nPublicRuntimeConfig

  const targetLocales: string[] = []
  if (experimental.typedOptionsAndMessages === 'default' && defaultLocale != null) {
    targetLocales.push(defaultLocale)
  } else if (experimental.typedOptionsAndMessages === 'all') {
    targetLocales.push(...normalizedLocales.map(x => x.code))
  }

  const merged = {
    messages: {},
    datetimeFormats: {},
    numberFormats: {}
  }

  const vueI18nConfig: I18nOptions = await loadVueI18nOptions(vueI18nConfigs)
  for (const locale of targetLocales) {
    deepCopy(vueI18nConfig.messages?.[locale] || {}, merged.messages)
    deepCopy(vueI18nConfig.numberFormats?.[locale] || {}, merged.numberFormats)
    deepCopy(vueI18nConfig.datetimeFormats?.[locale] || {}, merged.datetimeFormats)
  }

  const loaderPromises: Promise<unknown>[] = []
  for (const locale in localeLoaders) {
    if (!targetLocales.includes(locale)) continue
    const loader = async () => deepCopy(await getMergedMessages(locale, []), merged.messages)
    loaderPromises.push(loader())
  }

  await Promise.all(loaderPromises)
  await writeFile(dtsFile, generateTypeCode(merged), 'utf-8')
}

/**
 * Simplifies messages object to properties of an interface
 */
function generateInterface(obj: Record<string, unknown>, indentLevel = 1) {
  const indent = '  '.repeat(indentLevel)
  let str = ''

  for (const key in obj) {
    if (!Object.prototype.hasOwnProperty.call(obj, key)) continue

    if (isObject(obj[key]) && obj[key] !== null && !isArray(obj[key])) {
      str += `${indent}"${key}": {\n`
      str += generateInterface(obj[key] as Record<string, unknown>, indentLevel + 1)
      str += `${indent}};\n`
    } else {
      let propertyType = isArray(obj[key]) ? 'unknown[]' : typeof obj[key]
      if (isFunction(propertyType)) {
        propertyType = '() => string'
      }
      str += `${indent}"${key}": ${propertyType};\n`
    }
  }
  return str
}

function generateTypeCode(res: I18nOptions) {
  return `// generated by @nuxtjs/i18n
import type { DateTimeFormatOptions, NumberFormatOptions, SpecificNumberFormatOptions, CurrencyNumberFormatOptions } from '@intlify/core'

interface GeneratedLocaleMessage {
  ${generateInterface(res.messages || {}).trim()}
}

interface GeneratedDateTimeFormat {
  ${Object.keys(res.datetimeFormats || {})
    .map(k => `${k}: DateTimeFormatOptions;`)
    .join(`\n  `)}
}

interface GeneratedNumberFormat {
  ${Object.entries(res.numberFormats || {})
    .map(([k]) => `${k}: NumberFormatOptions;`)
    .join(`\n  `)}
}

declare module 'vue-i18n' {
  export interface DefineLocaleMessage extends GeneratedLocaleMessage {}
  export interface DefineDateTimeFormat extends GeneratedDateTimeFormat {}
  export interface DefineNumberFormat extends GeneratedNumberFormat {}
}

declare module '@intlify/core' {
  export interface DefineCoreLocaleMessage extends GeneratedLocaleMessage {}
}

export {}`
}
