import createDebug from 'debug'
import { addTemplate } from '@nuxt/kit'
import { readFileSync } from 'node:fs'
import { isString } from '@intlify/shared'
import { parse as parseSFC, compileScript } from '@vue/compiler-sfc'
import { walk } from 'estree-walker'
import { mkdir, readFile, writeFile } from 'node:fs/promises'
import { getRoutePath, parseSegment } from './utils/route-parsing'
import { localizeRoutes } from './routing'
import { resolve, parse as parsePath, dirname } from 'pathe'
import { NUXT_I18N_COMPOSABLE_DEFINE_ROUTE } from './constants'
import { createRoutesContext } from 'unplugin-vue-router'
import { resolveOptions } from 'unplugin-vue-router/options'

import type { Nuxt, NuxtPage } from '@nuxt/schema'
import type { Node, ObjectExpression, ArrayExpression, Expression, PrivateName } from '@babel/types'
import type { EditableTreeNode, Options as TypedRouterOptions } from 'unplugin-vue-router'
import type { NuxtI18nOptions } from './types'
import type { I18nNuxtContext } from './context'
import type { ComputedRouteOptions, RouteOptionsResolver } from './kit/gen'
import type { I18nRoute } from './runtime/composables'

const debug = createDebug('@nuxtjs/i18n:pages')

export type AnalyzedNuxtPageMeta = {
  /**
   * Analyzed path used to retrieve configured custom paths
   */
  path: string
  name?: string
}

type NuxtPageAnalyzeContext = {
  /**
   * Array of paths to track current route depth
   */
  stack: string[]
  config: NuxtI18nOptions['pages']
  pages: Map<string, AnalyzedNuxtPageMeta>
}

type NarrowedNuxtPage = Omit<NuxtPage, 'redirect' | 'children'> & {
  redirect?: (Omit<NarrowedNuxtPage, 'name'> & { name?: string }) | string
  children?: NarrowedNuxtPage[]
}

export async function setupPages({ localeCodes, options, normalizedLocales }: I18nNuxtContext, nuxt: Nuxt) {
  if (!localeCodes.length) return

  let includeUnprefixedFallback = !nuxt.options.ssr
  nuxt.hook('nitro:init', () => {
    debug('enable includeUprefixedFallback')
    includeUnprefixedFallback = options.strategy !== 'prefix'
  })

  const projectLayer = nuxt.options._layers[0]
  const typedRouter = await setupExperimentalTypedRoutes(options, nuxt)

  nuxt.options.experimental.extraPageMetaExtractionKeys ??= []
  nuxt.options.experimental.extraPageMetaExtractionKeys.push('i18n')
  nuxt.hook(
    nuxt.options.experimental.scanPageMeta === 'after-resolve' ? 'pages:resolved' : 'pages:extend',
    async pages => {
      debug('pages (before)', pages)
      const ctx: NuxtPageAnalyzeContext = {
        stack: [],
        config: options.pages,
        pages: new Map<string, AnalyzedNuxtPageMeta>()
      }

      // analyze layer pages
      for (const layer of nuxt.options._layers) {
        const pagesDir = resolve(projectLayer.config.rootDir, layer.config.srcDir, layer.config.dir?.pages ?? 'pages')
        analyzeNuxtPages(ctx, pagesDir, pages)
      }

      if (typedRouter) {
        await typedRouter.createContext(pages).scanPages(false)
      }

      const localizedPages = localizeRoutes(pages as NarrowedNuxtPage[], {
        ...options,
        includeUnprefixedFallback,
        locales: normalizedLocales,
        optionsResolver: getRouteOptionsResolver(ctx, options)
      })

      // keep root when using prefixed routing without prerendering
      const indexPage = pages.find(x => x.path === '/')
      if (!nuxt.options._generate && options.strategy === 'prefix' && indexPage != null) {
        localizedPages.unshift(indexPage as NarrowedNuxtPage)
      }

      // do not mutate pages if localization is skipped
      if (pages !== localizedPages) {
        pages.length = 0
        pages.unshift(...localizedPages)
      }

      debug('pages (after)', pages)
    }
  )
}

/**
 * Expression to to find the `RouteNamedMap` generated by uvr, used to replace with `RouteNamedMapI18n`
 */
const routeNamedMapTypeRE = /RouteNamedMap\b/

/**
 * Declaration file containing the generated route types
 */
const declarationFile = './types/typed-router-i18n.d.ts'

/**
 * Setup experiment typed routes feature if enabled
 */
async function setupExperimentalTypedRoutes(userOptions: NuxtI18nOptions, nuxt: Nuxt) {
  if (!nuxt.options.experimental.typedPages || userOptions.experimental?.typedPages === false) {
    return undefined
  }

  const dtsFile = resolve(nuxt.options.buildDir, declarationFile)

  /**
   * Typed route generation from Nuxt with modifications
   * https://github.com/nuxt/nuxt/blob/781d8c4174c410a7aff6b809817b15eae85d3ba8/packages/nuxt/src/pages/module.ts#L160-L208
   */
  function createContext(pages: NuxtPage[]) {
    const typedRouteroptions: TypedRouterOptions = {
      routesFolder: [],
      dts: dtsFile,
      logs: !!nuxt.options.debug,
      watch: false,
      // eslint-disable-next-line @typescript-eslint/require-await
      async beforeWriteFiles(rootPage) {
        rootPage.children.forEach(child => child.delete())
        function addPage(parent: EditableTreeNode, page: NuxtPage) {
          // @ts-expect-error TODO: either fix types upstream or figure out another
          // way to add a route without a file, which must be possible
          const route = parent.insert(page.path, page.file)
          if (page.meta) {
            route.addToMeta(page.meta)
          }
          if (page.alias) {
            route.addAlias(page.alias)
          }
          if (page.name) {
            route.name = page.name
          }
          // TODO: implement redirect support
          // if (page.redirect) {}
          if (page.children) {
            page.children.forEach(child => addPage(route, child))
          }
        }

        for (const page of pages) {
          addPage(rootPage, page)
        }
      }
    }

    const context = createRoutesContext(resolveOptions(typedRouteroptions))

    /**
     * Wrap `scanPages` to rename interface `RouteNamedMap` => `RouteNamedMapI18n`
     */
    const originalScanPages = context.scanPages.bind(context)
    context.scanPages = async function (watchers = false) {
      await mkdir(dirname(dtsFile), { recursive: true })
      await originalScanPages(watchers)

      const dtsContent = await readFile(dtsFile, 'utf-8')

      if (routeNamedMapTypeRE.test(dtsContent)) {
        await writeFile(dtsFile, dtsContent.replace(routeNamedMapTypeRE, 'RouteNamedMapI18n'))
      }
    }

    return context
  }

  addTemplate({
    filename: resolve(nuxt.options.buildDir, './types/i18n-generated-route-types.d.ts'),
    getContents: () => {
      return `// Generated by @nuxtjs/i18n
declare module 'vue-router' {
  import type { RouteNamedMapI18n } from 'vue-router/auto-routes'

  export interface TypesConfig {
    RouteNamedMapI18n: RouteNamedMapI18n
  }
}

export {}`
    }
  })

  nuxt.hook('prepare:types', ({ references }) => {
    // This file will be generated by unplugin-vue-router
    references.push({ path: declarationFile })
    references.push({ types: './types/i18n-generated-route-types.d.ts' })
  })

  await createContext(nuxt.apps.default?.pages ?? []).scanPages(false)

  return { createContext }
}

/**
 * Analyze page path
 */
function analyzePagePath(pagePath: string, parents = 0) {
  const { dir, name } = parsePath(pagePath)

  if (parents > 0 || dir !== '/') {
    return `${dir.slice(1, dir.length)}/${name}`
  }

  return name
}

/**
 * Construct the map of full paths from NuxtPage to support custom routes.
 * `NuxtPage` of the nested route doesn't have a slash (`/`) and isnâ€™t the full path.
 */
export function analyzeNuxtPages(ctx: NuxtPageAnalyzeContext, pagesDir: string, pages?: NuxtPage[]): void {
  if (pages == null || pages.length === 0) return

  for (const page of pages) {
    if (page.file == null) continue

    const splits = page.file.split(pagesDir)
    const filePath = splits.at(1)
    if (filePath == null) continue

    ctx.pages.set(page.file, {
      path: analyzePagePath(filePath, ctx.stack.length),
      // if route has an index child the parent will not have a name
      name: page.name ?? page.children?.find(x => x.path.endsWith('/index'))?.name
    })

    ctx.stack.push(page.path)
    analyzeNuxtPages(ctx, pagesDir, page.children)
    ctx.stack.pop()
  }
}

/**
 * Function factory, returns a function based on the `customRoutes` option property
 */
export function getRouteOptionsResolver(
  ctx: NuxtPageAnalyzeContext,
  options: Pick<Required<NuxtI18nOptions>, 'pages' | 'defaultLocale' | 'customRoutes'>
): RouteOptionsResolver {
  const { defaultLocale, customRoutes } = options
  return (route, localeCodes) => getRouteOptions(route, localeCodes, ctx, defaultLocale, customRoutes)
}

function resolveRoutePath(path: string): string {
  const normalizePath = path.slice(1, path.length) // remove `/`
  const tokens = parseSegment(normalizePath)
  return getRoutePath(tokens)
}

function getRouteFromConfig(
  ctx: NuxtPageAnalyzeContext,
  route: NuxtPage,
  localeCodes: string[]
): ComputedRouteOptions | false | undefined {
  const pageMeta = ctx.pages.get(route.file!)

  if (pageMeta == null) {
    console.warn(`[nuxt-i18n] No custom route config found for ${route.path}`)
    return undefined
  }

  const valueByName = pageMeta?.name ? ctx.config?.[pageMeta.name] : undefined
  const valueByPath = pageMeta?.path != null ? ctx.config?.[pageMeta.path] : undefined
  const resolved = valueByName ?? valueByPath
  if (!resolved) return resolved
  return {
    paths: (resolved ?? {}) as Record<string, string>,
    locales: localeCodes.filter(locale => resolved[locale] !== false)
  }
}

function getRouteFromResource(
  localeCodes: string[],
  resolved: ComputedRouteOptions | I18nRoute | false | undefined
): ComputedRouteOptions | false | undefined {
  if (!resolved) return resolved
  return {
    paths: (resolved.paths ?? {}) as Record<string, string>,
    locales: resolved?.locales || localeCodes
  }
}

function getRouteOptions(
  route: NuxtPage,
  localeCodes: string[],
  ctx: NuxtPageAnalyzeContext,
  defaultLocale: string,
  mode: 'config' | 'page' | 'meta' = 'config'
) {
  let resolvedOptions
  if (mode === 'config') {
    resolvedOptions = getRouteFromConfig(ctx, route, localeCodes)
  } else {
    resolvedOptions = getRouteFromResource(
      localeCodes,
      mode === 'page' ? readComponent(route.file!) : (route.meta?.i18n as I18nRoute | false | undefined)
    )
  }

  // routing disabled
  if (resolvedOptions === false) {
    return undefined
  }

  const locales = resolvedOptions?.locales || localeCodes
  const paths: Record<string, string> = {}

  // skip if no page options defined
  if (!resolvedOptions) {
    return { locales, paths }
  }

  // construct paths object
  for (const locale of resolvedOptions.locales) {
    // set custom path if any
    if (isString(resolvedOptions.paths[locale])) {
      paths[locale] = resolveRoutePath(resolvedOptions.paths[locale])
      continue
    }

    // set default locale's custom path if any
    if (isString(resolvedOptions.paths[defaultLocale])) {
      paths[locale] = resolveRoutePath(resolvedOptions.paths[defaultLocale])
    }
  }

  return { locales, paths }
}

/**
 * Parse page component at `target` and extract argument passed to `defineI18nRoute()`
 */
function readComponent(target: string) {
  try {
    const content = readFileSync(target, 'utf-8')
    const { descriptor } = parseSFC(content)

    if (!content.includes(NUXT_I18N_COMPOSABLE_DEFINE_ROUTE)) {
      return undefined
    }

    const desc = compileScript(descriptor, { id: target })

    let extract = ''
    const genericSetupAst = desc.scriptSetupAst || desc.scriptAst || []
    for (const ast of genericSetupAst) {
      // @ts-expect-error type mismatch
      walk(ast, {
        enter(node: Node) {
          if (node.type !== 'CallExpression') return
          if (node.callee.type === 'Identifier' && node.callee.name === NUXT_I18N_COMPOSABLE_DEFINE_ROUTE) {
            const arg = node.arguments[0]
            if (
              arg.type === 'BooleanLiteral' ||
              (arg.type === 'ObjectExpression' && verifyObjectValue(arg.properties))
            ) {
              extract = desc.loc.source.slice(arg.start!, arg.end!)
            }
          }
        }
      })
    }

    if (extract) {
      return evalValue(extract)
    }
  } catch (e: unknown) {
    console.warn(`[nuxt-i18n] Couldn't read component data at ${target}: (${(e as Error).message})`)
  }

  return undefined
}

function nodeNameOrValue(val: PrivateName | Expression, name: string) {
  return (val.type === 'Identifier' && val.name === name) || (val.type === 'StringLiteral' && val.value === name)
}

function verifyObjectValue(properties: ObjectExpression['properties']) {
  for (const prop of properties) {
    if (prop.type !== 'ObjectProperty') {
      console.warn(`[nuxt-i18n] 'defineI18nRoute' requires an object as argument`)
      return false
    }

    if (nodeNameOrValue(prop.key, 'locales')) {
      if (prop.value.type !== 'ArrayExpression' || !verifyLocalesArrayExpression(prop.value.elements)) {
        console.warn(`[nuxt-i18n] expected 'locale' to be an array`)
        return false
      }
    }

    if (nodeNameOrValue(prop.key, 'paths')) {
      if (prop.value.type !== 'ObjectExpression' || !verifyPathsObjectExpress(prop.value.properties)) {
        console.warn(`[nuxt-i18n] expected 'paths' to be an object`)
        return false
      }
    }
  }

  return true
}

function verifyPathsObjectExpress(properties: ObjectExpression['properties']) {
  for (const prop of properties) {
    if (prop.type !== 'ObjectProperty') {
      console.warn(`[nuxt-i18n] 'paths' is required object`)
      return false
    }

    if (prop.key.type === 'Identifier' && prop.value.type !== 'StringLiteral') {
      console.warn(`[nuxt-i18n] expected 'paths.${prop.key.name}' to be a string literal`)
      return false
    }

    if (prop.key.type === 'StringLiteral' && prop.value.type !== 'StringLiteral') {
      console.warn(`[nuxt-i18n] expected 'paths.${prop.key.value}' to be a string literal`)
      return false
    }
  }

  return true
}

function verifyLocalesArrayExpression(elements: ArrayExpression['elements']) {
  for (const element of elements) {
    if (element?.type !== 'StringLiteral') {
      console.warn(`[nuxt-i18n] required 'locales' value string literal`)
      return false
    }
  }
  return true
}

function evalValue(value: string) {
  try {
    // eslint-disable-next-line @typescript-eslint/no-implied-eval, @typescript-eslint/no-unsafe-call
    return new Function(`return (${value})`)() as ComputedRouteOptions | false
  } catch {
    console.error(`[nuxt-i18n] Cannot evaluate value: ${value}`)
    return
  }
}
