import { addServerHandler, addTypeTemplate, createResolver, updateTemplates, useNitro } from '@nuxt/kit'

import type { Nuxt } from '@nuxt/schema'
import type { I18nNuxtContext } from './context'

export function enableVueI18nTypeGeneration(
  { options: _options, localeInfo, vueI18nConfigPaths }: I18nNuxtContext,
  nuxt: Nuxt
) {
  function generateInterface(obj: Record<string, unknown>, indentLevel = 1) {
    const indent = '  '.repeat(indentLevel)
    let str = ''

    for (const key in obj) {
      if (!Object.prototype.hasOwnProperty.call(obj, key)) continue

      if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
        str += `${indent}${key}: {\n`
        str += generateInterface(obj[key] as Record<string, unknown>, indentLevel + 1)
        str += `${indent}};\n`
      } else {
        // str += `${indent}/**\n`
        // str += `${indent} * ${JSON.stringify(obj[key])}\n`
        // str += `${indent} */\n`
        let propertyType = Array.isArray(obj[key]) ? 'unknown[]' : typeof obj[key]
        if (propertyType === 'function') {
          propertyType = '() => string'
        }
        str += `${indent}${key}: ${propertyType};\n`
      }
    }
    return str
  }

  nuxt.options._i18n = { locales: localeInfo }

  const resolver = createResolver(import.meta.url)

  addServerHandler({
    route: '/api/merged',
    // @ts-ignore
    handler: resolver.resolve('./runtime/server/api/merged.get')
  })

  let res: {
    messages: Record<string, string>
    numberFormats: Record<string, string>
    dateFormats: Record<string, string>
  }

  nuxt.hook('vite:serverCreated', () => {
    useNitro().hooks.hook('compiled', async () => {
      try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        res = await (await fetch(nuxt.options.devServer.url + 'api/merged')).json()
        void updateTemplates({ filter: template => template.filename === 'types/i18n-messages.d.ts' })
      } catch {
        // console.log('fetch failed')
      }
    })
  })

  addTypeTemplate({
    filename: 'types/i18n-messages.d.ts',
    getContents: () => {
      if (res == null) return ''

      // function getNumberFormatType(v: NumberFormatOptions) {
      //   if (v.style == null) return 'NumberFormatOptions'

      //   /**
      //    * Generating narrowed types may not be desired as types are only updated on save
      //    */
      //   // if (v.style === 'currency') return 'CurrencyNumberFormatOptions'
      //   // if (v.style === 'decimal' || v.style === 'percent') return 'CurrencyNumberFormatOptions'
      //   return 'NumberFormatOptions'
      // }

      return `// generated by @nuxtjs/i18n
import type { DateTimeFormatOptions, NumberFormatOptions, SpecificNumberFormatOptions, CurrencyNumberFormatOptions } from '@intlify/core'

interface GeneratedLocaleMessage {
  ${generateInterface(res.messages || {}).trim()}
}

interface GeneratedDateTimeFormat {
  ${Object.keys(res.dateFormats || {})
    .map(k => `${k}: DateTimeFormatOptions;`)
    .join(`\n  `)}
}

interface GeneratedNumberFormat {
  ${Object.entries(res.numberFormats || {})
    // .map(([k, v]) => `${k}: ${getNumberFormatType(v as NumberFormatOptions)};`)
    .map(([k]) => `${k}: NumberFormatOptions;`)
    .join(`\n  `)}
}

declare module 'vue-i18n' {
  export interface DefineLocaleMessage extends GeneratedLocaleMessage {}
  export interface DefineDateTimeFormat extends GeneratedDateTimeFormat {}
  export interface DefineNumberFormat extends GeneratedNumberFormat {}
}

declare module '@intlify/core' {
  export interface DefineCoreLocaleMessage extends GeneratedLocaleMessage {}
}

export {}`
    }
  })

  // watch locale files for changes and update template
  nuxt.hook('builder:watch', async (_, path) => {
    const paths = nuxt.options._i18n.locales.flatMap(x => x.files.map(f => f.path))
    if (!paths.includes(path) && !vueI18nConfigPaths.some(x => x.absolute.includes(path))) return

    await updateTemplates({ filter: template => template.filename === 'types/i18n-messages.d.ts' })
  })
}
