import defu from 'defu'
import { addServerPlugin } from '@nuxt/kit'
import { mkdir } from 'fs/promises'
import { dirname } from 'pathe'

import type { Nuxt } from '@nuxt/schema'
import type { I18nNuxtContext } from '../context'

export async function prepareTypeGeneration({ resolver, options }: I18nNuxtContext, nuxt: Nuxt) {
  if (options.experimental.typedOptionsAndMessages === false || !nuxt.options.dev) return

  const declarationFile = './types/i18n-messages.d.ts'
  const dtsFile = resolver.resolve(nuxt.options.buildDir, declarationFile)

  addServerPlugin(resolver.resolve('runtime/server/type-generation'))

  // provide file build path to runtime plugin through virtual file
  nuxt.options.nitro = defu(nuxt.options.nitro, {
    externals: {
      inline: [/#internal\/i18n-type-generation-options/]
    },
    virtual: {
      '#internal/i18n-type-generation-options': () => `export const dtsFile = ${JSON.stringify(dtsFile)}`
    }
  })

  await mkdir(dirname(dtsFile), { recursive: true })

  nuxt.hook('prepare:types', ({ references }) => {
    // This file will be generated by type-generation plugin
    references.push({ path: declarationFile })
  })
}
